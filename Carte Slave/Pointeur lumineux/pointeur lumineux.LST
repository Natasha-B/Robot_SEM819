C51 COMPILER V9.52.0.0   POINTEUR_LUMINEUX                                                 04/02/2019 11:45:22 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE POINTEUR_LUMINEUX
OBJECT MODULE PLACED IN pointeur lumineux.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE pointeur lumineux.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //------------------------------------------------------------------------------------
   2          // pointeur lumineux.c
   3          //------------------------------------------------------------------------------------
   4          // DATE: 11/03/19
   5          //
   6          // Target: C8051F02x
   7          // Tool chain: KEIL Microvision 4
   8          //
   9          // DEVLOPPE PAR : Bru Natacha, Brouse Léa 
  10          
  11          //
  12          //------------------------------------------------------------------------------------
  13          #include "c8051F020.h"
  14          #include "pointeur.h"
  15          
  16          
  17          // UART
  18          char UART_buff;
  19          char UART_busy = 0;
  20          
  21          
  22          //------------------------------------------------------------------------------------
  23          // CONFIGURATION
  24          //------------------------------------------------------------------------------------
  25          
  26          
  27          /**
  28           * Configuration de la fonction Delay attente de x ms
  29           * @param int j, j est le nobte de ms à attendre
  30           * @return void
  31           */
  32          
  33          void delay(int j){
  34   1        unsigned int n, cp;
  35   1        for(n=0;n<j;n++){
  36   2          for(cp=0;cp<2500;cp++){
  37   3          };
  38   2        }
  39   1      }
  40          
  41          /**
  42           * Configuration de l'horloge externe à 22,1184 MHz, pour assurer une bonne transmission/reception série
  43           * @param void
  44           * @return void
  45           * Registres modifiés : OSCICN , OSCXCN
  46           */
  47          
  48          void cfg_clk (void){
  49   1        // Enable the external oscillator
  50   1        OSCXCN = 0x67;
  51   1      
  52   1        // Wait at least 1ms
  53   1        delay(2);
  54   1      
  55   1        // Switch the system clk to the external oscillator
C51 COMPILER V9.52.0.0   POINTEUR_LUMINEUX                                                 04/02/2019 11:45:22 PAGE 2   

  56   1        OSCICN = 0x1c;
  57   1      }
  58          
  59          
  60          
  61          /**
  62           * Configuration du Timer 2 pour la gestion de l'UART
  63           * @param void
  64           * @return void
  65           * Registres modifiés : T2CON, CKCON , RCAP2, IE
  66           */
  67          void cfg_timer2 (void) {
  68   1        RCLK0 = 1;
  69   1        TCLK0 = 1;
  70   1        CPRL2 = 0;
  71   1        CKCON |= 0x20;
  72   1        RCAP2L = 0xB8; // 9600b
  73   1        RCAP2H = 0xFF;
  74   1        
  75   1        // Interruptions
  76   1        ES0 = 1;
  77   1        ET2 = 0x00; // Overflow
  78   1        
  79   1        // Démarrage TIMER2
  80   1        TR2 = 1;
  81   1      }
  82          
  83          /**
  84           * Configuration de l'UART
  85           * @param void
  86           * @return void
  87           * Registres modifiés : SCON0, P0MDOUT, XBR2, XBR0
  88           */
  89          void cfg_UART (void) {
  90   1        SCON0 = 0x50;
  91   1        P0MDOUT = 0xFF;
  92   1        XBR2 |= 0x40;
  93   1        XBR0 |= 0x04;
  94   1      }
  95            
  96          /**
  97           * Activation des interruptions
  98           * @param void
  99           * @return void
 100           * Registres modifiés : IE
 101           */
 102          void cfg_interrupt (void) {
 103   1        EA = 1; // enable all interupts
 104   1        EIE1 |= 0x08;
 105   1        EIP1 |= 0x08;
 106   1      }
 107          
 108          
 109          /**
 110           * Configuration de la PWM
 111           * @param void
 112           * @return void
 113           * Registres modifiés : 
 114           */
 115          
 116          void cfg_PWM(void){
 117   1        PCA0CN |= 0x00;
C51 COMPILER V9.52.0.0   POINTEUR_LUMINEUX                                                 04/02/2019 11:45:22 PAGE 3   

 118   1        PCA0MD |= 0x09;
 119   1        PCA0CPM0 |= 0xc3;
 120   1        XBR0 |= 0x08;
 121   1        P0MDOUT |= 0xff;
 122   1      }
 123          
 124          
 125          //------------------------------------------------------------------------------------
 126          // UTILISATION
 127          //------------------------------------------------------------------------------------
 128          
 129          
 130          /**
 131           * Initialisation de la configuration
 132           * @param void
 133           * @return void
 134           */
 135          void init (void) {
 136   1        cfg_clk();
 137   1        cfg_UART();
 138   1        cfg_timer2();
 139   1        cfg_interrupt();
 140   1        cfg_PWM();
 141   1        
 142   1        XBR2 |= 1<<6; //Activation du Crossbar
 143   1      }
 144          
 145          /**
 146           * Conversion int to string
 147           * @param int v , valeur à convertir
 148           * @return string str2, chaine de caractères associée
 149           */
 150          char *itos(unsigned int v) {
 151   1        char str1[20] = "", str2[20] = "";
 152   1        int unite = 0;
 153   1        int indice = 0, indice2 = 0;
 154   1        while(v != 0){
 155   2          unite = v%10; // Unité
 156   2          str1[indice] = 0x30 + unite;
 157   2          indice++;
 158   2          v = (v - unite)/10;
 159   2        }
 160   1        
 161   1        if(indice == 0) {
 162   2          indice = 1;
 163   2          str1[0] = '0';
 164   2        }
 165   1        
 166   1        // Reverse de string
 167   1        for(;indice > 0;indice--) {
 168   2          str2[indice-1] = str1[indice2];
 169   2          indice2++;
 170   2        }
 171   1        str2[indice2+1] = '\0';
 172   1        
 173   1        return str2;
 174   1      }
 175          
 176          /**
 177           * Envoi d'un caractère à l'UART
 178           * @param char c , caractère à envoyer
 179           * @return void
C51 COMPILER V9.52.0.0   POINTEUR_LUMINEUX                                                 04/02/2019 11:45:22 PAGE 4   

 180           * Registres modifiés : SBUF0
 181           */
 182          void UART_send (char c) {
 183   1        while(UART_busy == 1) {}
 184   1        UART_busy = 1;
 185   1        SBUF0 = c;
 186   1      }
 187          
 188          /**
 189           * Envoi d'une chaine de caractères à l'UART
 190           * @param char* s , chaine de caractères à envoyer
 191           * @return void
 192           */
 193          void UART_sends (char* s) {
 194   1        int i = 0;
 195   1        while(s[i] != '\0') {
 196   2          UART_send(s[i]);
 197   2          i++;
 198   2        }
 199   1      }
 200          
 201          
 202          /**
 203           * Envoi d'un retour à la ligne à l'UART
 204           * @param void
 205           * @return void 
 206           */
 207          void UART_sendCRLF (void) {
 208   1        UART_send(0x0D);
 209   1        UART_send(0x0A);
 210   1      }
 211          
 212          /**
 213           * Envoi d'un entier à l'UART
 214           * @param char* prefix, préfixe du message
 215           * @param int a, entier à envoyer
 216           * @param char* suffix, suffixe du message
 217           * @return void
 218           */
 219          void UART_sendi (char *prefix, int a, char *suffix) {
 220   1        UART_sends(prefix);
 221   1        UART_sends(itos(a));
 222   1        UART_sends(suffix);
 223   1        UART_sendCRLF();
 224   1      }
 225          
 226          
 227          /**
 228           * Réception d'un caractère sur l'UART (fait appel à des fonctions développées par le binome A)
 229           * @param void
 230           * @return void
 231           */
 232          void UART_receive (void) {
 233   1        char invalid_cmd = 0;
 234   1        if(UART_buff == 0)
 235   1          return;
 236   1      
 237   1      
 238   1        switch (UART_buff) {
 239   2          case 'C':
 240   2            UART_sends('C');
 241   2            start_blink_led(3,3,5,25);
C51 COMPILER V9.52.0.0   POINTEUR_LUMINEUX                                                 04/02/2019 11:45:22 PAGE 5   

 242   2            break;
 243   2          
 244   2          case 'E': 
 245   2            led_off();
 246   2            break;
 247   2          
 248   2          case 'A':
 249   2            led_on();
 250   2            break;
 251   2          
 252   2          default:
 253   2            invalid_cmd = 1;
 254   2            break;
 255   2        }
 256   1            
 257   1        UART_sends(invalid_cmd ? "Invalid command !" : "OK");
 258   1        UART_sendCRLF();
 259   1        UART_buff = 0x00;
 260   1      }
 261          
 262          /**
 263           * Interruption de l'UART
 264           * @param void
 265           * @return void
 266           * Registres modifiés : SCON0, SBUF0
 267           */
 268          void UART() interrupt 4 {
 269   1        // Reception
 270   1        if(RI0 == 1){
 271   2          UART_buff = SBUF0;
 272   2          RI0 = 0;
 273   2        }
 274   1        
 275   1        // Transmission
 276   1        if(TI0 == 1) {
 277   2          UART_busy = 0;
 278   2          TI0 = 0;
 279   2        }
 280   1      }
 281          
 282          void pointer_interrupt() interrupt 9{
 283   1        PCA0CN &= 0x7E;
 284   1      } 
 285          
 286          
 287          //------------------------------------------------------------------------------------
 288          // APPLICATION
 289          //------------------------------------------------------------------------------------
 290          
 291          /**
 292           * Envoi du message de démarrage
 293           * @param void
 294           * @return void
 295           */
 296          void Welcome() {
 297   1        UART_sendCRLF();
 298   1        UART_sendCRLF();
 299   1        UART_sends("********** POINTEUR LUMINEUX **********");
 300   1        UART_sendCRLF();
 301   1        UART_sends("Bienvenue :)");
 302   1        UART_sendCRLF();
 303   1      }
C51 COMPILER V9.52.0.0   POINTEUR_LUMINEUX                                                 04/02/2019 11:45:22 PAGE 6   

 304          
 305          
 306          /**
 307           * Active le clignotement de la LED:
 308           * @return void
 309           */
 310          int p;
 311          void start_blink_led(int t_up, int t_down, int n_period, int intensity) {
 312   1        for (p = 0; p < n_period; p++){
 313   2          float intensite = (-(((float)intensity * 655.36f)-65536.0f));
 314   2          unsigned int pca = (int) intensite;
 315   2          int pca1 = (pca/256);
 316   2          int pca2 = (pca%256);
 317   2          PCA0CPL0 = pca2;
 318   2          PCA0CPH0 = pca1;
 319   2          PCA0CN |= 0x40;
 320   2          delay(t_up * 1000);
 321   2          PCA0CN = 0x00;
 322   2          delay (t_down * 1000);
 323   2        }
 324   1      }
 325          
 326          void led_on (void){
 327   1        PCA0CPL0 = 0x00;
 328   1        PCA0CPH0 = 0x70;
 329   1        PCA0CN |= 0x40;
 330   1      }
 331          
 332          
 333          /**
 334           * Désactive le clignotement de la LED:
 335           * @return void
 336           */
 337          void led_off() {
 338   1        PCA0CPL0 = 0xFF;
 339   1        PCA0CPH0 = 0xFF;
 340   1        PCA0CN |= 0x40;
 341   1        
 342   1      }
 343          
 344          
 345          //------------------------------------------------------------------------------------
 346          // TEST
 347          //------------------------------------------------------------------------------------
 348          
 349          int main() {
 350   1        WDTCN = 0xDE;
 351   1        WDTCN = 0xAD;
 352   1        init();
 353   1        Welcome();
 354   1        while(1){
 355   2          UART_receive();
 356   2        };
 357   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    698    ----
   CONSTANT SIZE    =    114    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      74
C51 COMPILER V9.52.0.0   POINTEUR_LUMINEUX                                                 04/02/2019 11:45:22 PAGE 7   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
