C51 COMPILER V9.52.0.0   POINTEUR_LUMINEUX                                                 04/10/2019 12:02:55 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE POINTEUR_LUMINEUX
OBJECT MODULE PLACED IN pointeur lumineux.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE pointeur lumineux.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //------------------------------------------------------------------------------------
   2          // pointeur lumineux.c
   3          //------------------------------------------------------------------------------------
   4          // DATE: 11/03/19
   5          //
   6          // Target: C8051F02x
   7          // Tool chain: KEIL Microvision 4
   8          //
   9          // DEVLOPPE PAR : Bru Natacha, Brouse Léa 
  10          
  11          //
  12          //------------------------------------------------------------------------------------
  13          #include "c8051F020.h"
  14          #include "pointeur.h"
  15          
  16          
  17          /*// UART
  18          char UART_buff;
  19          char UART_busy = 0;
  20          */
  21          
  22          
  23          //------------------------------------------------------------------------------------
  24          // CONFIGURATION
  25          //------------------------------------------------------------------------------------
  26          
  27          
  28          /**
  29           * Configuration de la fonction Delay attente de x ms
  30           * @param int j, j est le nobte de ms à attendre
  31           * @return void
  32           */
  33          
  34          void delay(int j){
  35   1        unsigned int n, cp;
  36   1        for(n=0;n<j;n++){
  37   2          for(cp=0;cp<2500;cp++){
  38   3          };
  39   2        }
  40   1      }
  41          /**
  42           * Configuration de l'horloge externe à 22,1184 MHz, pour assurer une bonne transmission/reception série
  43           * @param void
  44           * @return void
  45           * Registres modifiés : OSCICN , OSCXCN
  46           */
  47          
  48          /*
  49          void cfg_clk (void){
  50            // Enable the external oscillator
  51            OSCXCN = 0x67;
  52          
  53            // Wait at least 1ms
  54            delay(2);
  55          
C51 COMPILER V9.52.0.0   POINTEUR_LUMINEUX                                                 04/10/2019 12:02:55 PAGE 2   

  56            // Switch the system clk to the external oscillator
  57            OSCICN = 0x1c;
  58          }
  59          */
  60          
  61          
  62          /**
  63           * Configuration du Timer 2 pour la gestion de l'UART
  64           * @param void
  65           * @return void
  66           * Registres modifiés : T2CON, CKCON , RCAP2, IE
  67           */
  68           /*
  69          void cfg_timer2 (void) {
  70            RCLK0 = 1;
  71            TCLK0 = 1;
  72            CPRL2 = 0;
  73            CKCON |= 0x20;
  74            RCAP2L = 0xB8; // 9600b
  75            RCAP2H = 0xFF;
  76            
  77            // Interruptions
  78            ES0 = 1;
  79            ET2 = 0x00; // Overflow
  80            
  81            // Démarrage TIMER2
  82            TR2 = 1;
  83          }
  84          */
  85          
  86          /**
  87           * Configuration de l'UART
  88           * @param void
  89           * @return void
  90           * Registres modifiés : SCON0, P0MDOUT, XBR2, XBR0
  91           */
  92           /*
  93          void cfg_UART (void) {
  94            SCON0 = 0x50;
  95            P0MDOUT = 0xFF;
  96            XBR2 |= 0x40;
  97            XBR0 |= 0x04;
  98          }
  99            */
 100          /**
 101           * Activation des interruptions
 102           * @param void
 103           * @return void
 104           * Registres modifiés : IE
 105           */
 106           
 107          void cfg_interrupt (void) {
 108   1        EA = 1; // enable all interupts
 109   1        EIE1 |= 0x08;
 110   1        EIP1 |= 0x08;
 111   1      }
 112          
 113          
 114          /**
 115           * Configuration de la PWM
 116           * @param void
 117           * @return void
C51 COMPILER V9.52.0.0   POINTEUR_LUMINEUX                                                 04/10/2019 12:02:55 PAGE 3   

 118           * Registres modifiés : 
 119           */
 120          
 121          void cfg_PWM(void){
 122   1        PCA0CN |= 0x00;
 123   1        PCA0MD |= 0x09;
 124   1        PCA0CPM0 |= 0xc3;
 125   1        XBR0 |= 0x08;
 126   1        P0MDOUT |= 0xff;
 127   1      }
 128          
 129          
 130          //------------------------------------------------------------------------------------
 131          // UTILISATION
 132          //------------------------------------------------------------------------------------
 133          
 134          
 135          /**
 136           * Initialisation de la configuration
 137           * @param void
 138           * @return void
 139           */
 140          void init (void) {
 141   1        //cfg_clk();
 142   1        //cfg_UART();
 143   1        //cfg_timer2();
 144   1        cfg_interrupt();
 145   1        cfg_PWM();
 146   1        
 147   1        XBR2 |= 1<<6; //Activation du Crossbar
 148   1      }
 149          
 150          
 151          /**
 152           * Conversion int to string
 153           * @param int v , valeur à convertir
 154           * @return string str2, chaine de caractères associée
 155           */
 156          /*
 157          char *itos(unsigned int v) {
 158            char str1[20] = "", str2[20] = "";
 159            int unite = 0;
 160            int indice = 0, indice2 = 0;
 161            while(v != 0){
 162              unite = v%10; // Unité
 163              str1[indice] = 0x30 + unite;
 164              indice++;
 165              v = (v - unite)/10;
 166            }
 167            
 168            if(indice == 0) {
 169              indice = 1;
 170              str1[0] = '0';
 171            }
 172            
 173            // Reverse de string
 174            for(;indice > 0;indice--) {
 175              str2[indice-1] = str1[indice2];
 176              indice2++;
 177            }
 178            str2[indice2+1] = '\0';
 179            
C51 COMPILER V9.52.0.0   POINTEUR_LUMINEUX                                                 04/10/2019 12:02:55 PAGE 4   

 180            return str2;
 181          }
 182          
 183          /**
 184           * Envoi d'un caractère à l'UART
 185           * @param char c , caractère à envoyer
 186           * @return void
 187           * Registres modifiés : SBUF0
 188           */
 189           /*
 190          void UART_send (char c) {
 191            while(UART_busy == 1) {}
 192            UART_busy = 1;
 193            SBUF0 = c;
 194          }
 195          
 196          /**
 197           * Envoi d'une chaine de caractères à l'UART
 198           * @param char* s , chaine de caractères à envoyer
 199           * @return void
 200           */
 201           /*
 202          void UART_sends (char* s) {
 203            int i = 0;
 204            while(s[i] != '\0') {
 205              UART_send(s[i]);
 206              i++;
 207            }
 208          }
 209          
 210          
 211          /**
 212           * Envoi d'un retour à la ligne à l'UART
 213           * @param void
 214           * @return void 
 215           */
 216           /*
 217          void UART_sendCRLF (void) {
 218            UART_send(0x0D);
 219            UART_send(0x0A);
 220          }
 221          
 222          /**
 223           * Envoi d'un entier à l'UART
 224           * @param char* prefix, préfixe du message
 225           * @param int a, entier à envoyer
 226           * @param char* suffix, suffixe du message
 227           * @return void
 228           */
 229           /*
 230          void UART_sendi (char *prefix, int a, char *suffix) {
 231            UART_sends(prefix);
 232            UART_sends(itos(a));
 233            UART_sends(suffix);
 234            UART_sendCRLF();
 235          }
 236          
 237          
 238          /**
 239           * Réception d'un caractère sur l'UART (fait appel à des fonctions développées par le binome A)
 240           * @param void
 241           * @return void
C51 COMPILER V9.52.0.0   POINTEUR_LUMINEUX                                                 04/10/2019 12:02:55 PAGE 5   

 242           */
 243          /* 
 244          void UART_receive (void) {
 245            char invalid_cmd = 0;
 246            if(UART_buff == 0)
 247              return;
 248          
 249          
 250            switch (UART_buff) {
 251              case 'C':
 252                UART_sends('C');
 253                start_blink_led(3,3,5,25);
 254                break;
 255              
 256              case 'E': 
 257                led_off();
 258                break;
 259              
 260              case 'A':
 261                led_on();
 262                break;
 263              
 264              default:
 265                invalid_cmd = 1;
 266                break;
 267            }
 268                
 269            UART_sends(invalid_cmd ? "Invalid command !" : "OK");
 270            UART_sendCRLF();
 271            UART_buff = 0x00;
 272          }
 273          
 274          /**
 275           * Interruption de l'UART
 276           * @param void
 277           * @return void
 278           * Registres modifiés : SCON0, SBUF0
 279           */
 280           /*
 281          void UART() interrupt 4 {
 282            // Reception
 283            if(RI0 == 1){
 284              UART_buff = SBUF0;
 285              RI0 = 0;
 286            }
 287            
 288            // Transmission
 289            if(TI0 == 1) {
 290              UART_busy = 0;
 291              TI0 = 0;
 292            }
 293          }
 294          */
 295          
 296          void pointer_interrupt() interrupt 9{
 297   1        PCA0CN &= 0x7E;
 298   1      } 
 299          
 300          
 301          //------------------------------------------------------------------------------------
 302          // APPLICATION
 303          //------------------------------------------------------------------------------------
C51 COMPILER V9.52.0.0   POINTEUR_LUMINEUX                                                 04/10/2019 12:02:55 PAGE 6   

 304          
 305          /**
 306           * Active le clignotement de la LED:
 307           * @return void
 308           */
 309          int p;
 310          void start_blink_led(int t_up, int t_down, int n_period, int intensity) {
 311   1        for (p = 0; p < n_period; p++){
 312   2          float intensite = (-(((float)intensity * 655.36f)-65536.0f));
 313   2          unsigned int pca = (int) intensite;
 314   2          int pca1 = (pca/256);
 315   2          int pca2 = (pca%256);
 316   2          PCA0CPL0 = pca2;
 317   2          PCA0CPH0 = pca1;
 318   2          PCA0CN |= 0x40;
 319   2          delay(t_up * 1000);
 320   2          PCA0CN = 0x00;
 321   2          delay (t_down * 1000);
 322   2        }
 323   1      }
 324          
 325          void led_on (void){
 326   1        PCA0CPL0 = 0x00;
 327   1        PCA0CPH0 = 0x70;
 328   1        PCA0CN |= 0x40;
 329   1      }
 330          
 331          
 332          /**
 333           * Désactive le clignotement de la LED:
 334           * @return void
 335           */
 336          void led_off() {
 337   1        PCA0CPL0 = 0xFF;
 338   1        PCA0CPH0 = 0xFF;
 339   1        PCA0CN |= 0x40;
 340   1        
 341   1      }
 342          
 343          
 344          //------------------------------------------------------------------------------------
 345          // TEST
 346          //------------------------------------------------------------------------------------
 347          
 348          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    226    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
